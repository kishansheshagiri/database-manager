From 09a7c6305b97d1f6b606785a460602779a38f99f Mon Sep 17 00:00:00 2001
From: Kishan Hulkodu Sheshagiri <kishan.sheshagiri@tamu.edu>
Date: Fri, 1 Dec 2017 11:23:22 -0600
Subject: [PATCH] Make dummy tuple public

---
 storage_manager/Tuple.h | 11 ++++++-----
 1 file changed, 6 insertions(+), 5 deletions(-)

diff --git a/storage_manager/Tuple.h b/storage_manager/Tuple.h
index 1232375..3274fbf 100644
--- a/storage_manager/Tuple.h
+++ b/storage_manager/Tuple.h
@@ -10,9 +10,9 @@ using namespace std;
 
 class SchemaManager;
 
-/* A tuple equals a record/row in a relation/table. 
- * A tuple contains at most MAX_NUM_OF_FIELDS_IN_RELATION=8 fields. 
- * Each field in a tuple has offset 0,1,2,... respectively, according to the defined schema. 
+/* A tuple equals a record/row in a relation/table.
+ * A tuple contains at most MAX_NUM_OF_FIELDS_IN_RELATION=8 fields.
+ * Each field in a tuple has offset 0,1,2,... respectively, according to the defined schema.
  * You can access a field by its offset or its field name.
  * Usage: Most of cases you access the tuples in main memory,
  *          either through the MainMemory class,
@@ -29,7 +29,6 @@ class Tuple {
   vector<union Field> fields;  // stores integer and string fields
   // DO NOT use the constructor here. Create an empty tuple only through Schema
   Tuple(SchemaManager* schema_manager, int schema_index);
-  static Tuple getDummyTuple(); // for internal use: returns an invalid tuple
 
   public:
   friend class Relation; // creates a tuple
@@ -40,6 +39,8 @@ class Tuple {
   int getNumOfFields() const; // returns the number of fields in the tuple
   int getTuplesPerBlock() const; // returns the number: tuples per block
 
+  static Tuple getDummyTuple(); // for internal use: returns an invalid tuple
+
   void null(); // invalidates the tuple
   bool setField(int offset,string s); // returns false if the type is wrong or out of bound
   bool setField(int offset,int i); // returns false if the type is wrong or out of bound
@@ -53,6 +54,6 @@ class Tuple {
   void printTuple(bool print_field_names) const; // prints the field values along with field names if TRUE
   void printTuple(bool print_field_names, ostream& out) const;
   friend ostream &operator<<(ostream &out, const Tuple &t);
-  
+
 };
 #endif
-- 
2.14.1

